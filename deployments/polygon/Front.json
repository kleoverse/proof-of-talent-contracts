{
  "address": "0x26d0b74C7d6A63cd68A2Acf839b44c220fE1622E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attestationsRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DifferentRequestsDestinations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ATTESTATIONS_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IAttestationsRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "attesters",
          "type": "address[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "groupId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimedValue",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Claim[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct Request[]",
          "name": "requests",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "proofDataArray",
          "type": "bytes[]"
        }
      ],
      "name": "batchBuildAttestations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "attesters",
          "type": "address[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "groupId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimedValue",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Claim[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct Request[]",
          "name": "requests",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "proofDataArray",
          "type": "bytes[]"
        }
      ],
      "name": "batchGenerateAttestations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[][]",
          "name": "",
          "type": "tuple[][]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "groupId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimedValue",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Claim[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct Request",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        }
      ],
      "name": "buildAttestations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "groupId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "claimedValue",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Claim[]",
              "name": "claims",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct Request",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        }
      ],
      "name": "generateAttestations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collectionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "issuer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcaaaaca1a7dc5e17d41c8f8d541cbbf070e5221262ce657001e14f926f138ec",
  "receipt": {
    "to": null,
    "from": "0xe5c7bd50c532C518Fc2613C2934Bd2003940298C",
    "contractAddress": "0xC8F08e1E4488693C8C15D56f7E1E18BFdF4E8193",
    "transactionIndex": 39,
    "gasUsed": "782842",
    "logsBloom": "0x
    "blockHash": "0x7303c17a619cae46310a148701f14d27f9747ff95126cb0d26dac64a9766f9d7",
    "transactionHash": "0xdcaaaaca1a7dc5e17d41c8f8d541cbbf070e5221262ce657001e14f926f138ec",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 33745126,
        "transactionHash": "0xdcaaaaca1a7dc5e17d41c8f8d541cbbf070e5221262ce657001e14f926f138ec",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e5c7bd50c532c518fc2613c2934bd2003940298c",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000007e098c21c56bde000000000000000000000000000000000000000000000000424f9059492750630000000000000000000000000000000000000000000184215d20469d522ec2aa00000000000000000000000000000000000000000000000041d186cd2761e4850000000000000000000000000000000000000000000184215d9e502973f42e88",
        "logIndex": 168,
        "blockHash": "0x7303c17a619cae46310a148701f14d27f9747ff95126cb0d26dac64a9766f9d7"
      }
    ],
    "blockNumber": 33745126,
    "cumulativeGasUsed": "6998789",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC33926eeF7195cC1128f48E8E877694dFe3c2dC4"
  ],
  "numDeployments": 1,
  "solcInputHash": "72359a0689ab68b52dfd4b2d67af74ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attestationsRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DifferentRequestsDestinations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ATTESTATIONS_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IAttestationsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct Request[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"proofDataArray\",\"type\":\"bytes[]\"}],\"name\":\"batchBuildAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct Request[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"proofDataArray\",\"type\":\"bytes[]\"}],\"name\":\"batchGenerateAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"buildAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"generateAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kleoverse - Forked from Sismo Protocol\",\"kind\":\"dev\",\"methods\":{\"batchBuildAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])\":{\"details\":\"build the attestations from multiple user requests. Forwards to the build function of targeted attester\",\"params\":{\"attesters\":\"Targeted attesters\",\"proofDataArray\":\"Data sent along the request to prove its validity\",\"requests\":\"User requests\"},\"returns\":{\"_0\":\"attestations Attestations that will be recorded\"}},\"batchGenerateAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])\":{\"details\":\"generate multiple attestations at once, to the same destination\",\"params\":{\"attesters\":\"Attesters targeted by the attesters\",\"proofDataArray\":\"Data sent with each request\",\"requests\":\"Requests sent to attester\"}},\"buildAttestations(address,((uint256,uint256,bytes)[],address),bytes)\":{\"details\":\"build the attestations from a user request targeting a specific attester. Forwards to the build function of targeted attester\",\"params\":{\"attester\":\"Targeted attester\",\"proofData\":\"Data sent along the request to prove its validity\",\"request\":\"User request\"},\"returns\":{\"_0\":\"attestations Attestations that will be recorded\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"attestationsRegistryAddress\":\"Attestations registry contract address\"}},\"generateAttestations(address,((uint256,uint256,bytes)[],address),bytes)\":{\"details\":\"Forward a request to an attester\",\"params\":{\"attester\":\"Attester targeted by the request\",\"proofData\":\"Data provided to the attester to back the request\",\"request\":\"Request sent to the attester\"}}},\"title\":\"Front\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is the Front contract of the Proof of Talent protocol Behind a proxy, it routes attestations request to the targeted attester and can perform some actions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/Front.sol\":\"Front\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/core/Front.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {IFront} from './interfaces/IFront.sol';\\nimport {IAttester} from './interfaces/IAttester.sol';\\nimport {IAttestationsRegistry} from './interfaces/IAttestationsRegistry.sol';\\nimport {Request, Attestation} from './libs/Structs.sol';\\n\\n/**\\n * @title Front\\n * @author Kleoverse - Forked from Sismo Protocol\\n * @notice This is the Front contract of the Proof of Talent protocol\\n * Behind a proxy, it routes attestations request to the targeted attester and can perform some actions\\n */\\ncontract Front is IFront {\\n  IAttestationsRegistry public immutable ATTESTATIONS_REGISTRY;\\n\\n  /**\\n   * @dev Constructor\\n   * @param attestationsRegistryAddress Attestations registry contract address\\n   */\\n  constructor(address attestationsRegistryAddress) {\\n    ATTESTATIONS_REGISTRY = IAttestationsRegistry(attestationsRegistryAddress);\\n  }\\n\\n  /**\\n   * @dev Forward a request to an attester\\n   * @param attester Attester targeted by the request\\n   * @param request Request sent to the attester\\n   * @param proofData Data provided to the attester to back the request\\n   */\\n  function generateAttestations(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external override returns (Attestation[] memory) {\\n    Attestation[] memory attestations = _forwardAttestationsGeneration(\\n      attester,\\n      request,\\n      proofData\\n    );\\n    return attestations;\\n  }\\n\\n  /**\\n   * @dev generate multiple attestations at once, to the same destination\\n   * @param attesters Attesters targeted by the attesters\\n   * @param requests Requests sent to attester\\n   * @param proofDataArray Data sent with each request\\n   */\\n  function batchGenerateAttestations(\\n    address[] calldata attesters,\\n    Request[] calldata requests,\\n    bytes[] calldata proofDataArray\\n  ) external override returns (Attestation[][] memory) {\\n    Attestation[][] memory attestations = new Attestation[][](attesters.length);\\n    address destination = requests[0].destination;\\n    for (uint256 i = 0; i < attesters.length; i++) {\\n      if (requests[i].destination != destination) revert DifferentRequestsDestinations();\\n      attestations[i] = _forwardAttestationsGeneration(\\n        attesters[i],\\n        requests[i],\\n        proofDataArray[i]\\n      );\\n    }\\n    return attestations;\\n  }\\n\\n  /**\\n   * @dev build the attestations from a user request targeting a specific attester.\\n   * Forwards to the build function of targeted attester\\n   * @param attester Targeted attester\\n   * @param request User request\\n   * @param proofData Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function buildAttestations(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external view override returns (Attestation[] memory) {\\n    return _forwardAttestationsBuild(attester, request, proofData);\\n  }\\n\\n  /**\\n   * @dev build the attestations from multiple user requests.\\n   * Forwards to the build function of targeted attester\\n   * @param attesters Targeted attesters\\n   * @param requests User requests\\n   * @param proofDataArray Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function batchBuildAttestations(\\n    address[] calldata attesters,\\n    Request[] calldata requests,\\n    bytes[] calldata proofDataArray\\n  ) external view override returns (Attestation[][] memory) {\\n    Attestation[][] memory attestations = new Attestation[][](attesters.length);\\n\\n    for (uint256 i = 0; i < attesters.length; i++) {\\n      attestations[i] = _forwardAttestationsBuild(attesters[i], requests[i], proofDataArray[i]);\\n    }\\n    return attestations;\\n  }\\n\\n  function _forwardAttestationsBuild(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) internal view returns (Attestation[] memory) {\\n    return IAttester(attester).buildAttestations(request, proofData);\\n  }\\n\\n  function _forwardAttestationsGeneration(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) internal returns (Attestation[] memory) {\\n    return IAttester(attester).generateAttestations(request, proofData);\\n  }\\n}\\n\",\"keccak256\":\"0xc77212a80e7ff898e36d29a2f44df6f5bffce4c7eb24519ca8afd3441504f1b1\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttestationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Attestation, AttestationData} from '../libs/Structs.sol';\\n\\n/**\\n * @title IAttestationsRegistry\\n * @author Kleoverse - Forked from Sismo Protocol\\n * @notice This is the interface of the AttestationRegistry\\n */\\ninterface IAttestationsRegistry {\\n  error IssuerNotAuthorized(address issuer, uint256 collectionId);\\n  error OwnersAndCollectionIdsLengthMismatch(address[] owners, uint256[] collectionIds);\\n  event AttestationRecorded(Attestation attestation);\\n  event AttestationDeleted(Attestation attestation);\\n\\n  /**\\n   * @dev Main function to be called by authorized issuers\\n   * @param attestations Attestations to be recorded (creates a new one or overrides an existing one)\\n   */\\n  function recordAttestations(Attestation[] calldata attestations) external;\\n\\n  /**\\n   * @dev Delete function to be called by authorized issuers\\n   * @param owners The owners of the attestations to be deleted\\n   * @param collectionIds The collection ids of the attestations to be deleted\\n   */\\n  function deleteAttestations(address[] calldata owners, uint256[] calldata collectionIds) external;\\n\\n  /**\\n   * @dev Returns whether a user has an attestation from a collection\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function hasAttestation(uint256 collectionId, address owner) external returns (bool);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationData(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (AttestationData memory);\\n\\n  /**\\n   * @dev Getter of the value of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationValue(uint256 collectionId, address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Getter of the data of a specific attestation as tuple\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationDataTuple(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (\\n      address,\\n      uint256,\\n      uint32,\\n      bytes memory\\n    );\\n\\n  /**\\n   * @dev Getter of the extraData of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationExtraData(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (bytes memory);\\n\\n  /**\\n   * @dev Getter of the issuer of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationIssuer(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev Getter of the timestamp of a specific attestation\\n   * @param collectionId Collection identifier of the targeted attestation\\n   * @param owner Owner of the targeted attestation\\n   */\\n  function getAttestationTimestamp(uint256 collectionId, address owner)\\n    external\\n    view\\n    returns (uint32);\\n\\n  /**\\n   * @dev Getter of the data of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationDataBatch(uint256[] memory collectionIds, address[] memory owners)\\n    external\\n    view\\n    returns (AttestationData[] memory);\\n\\n  /**\\n   * @dev Getter of the values of specific attestations\\n   * @param collectionIds Collection identifiers of the targeted attestations\\n   * @param owners Owners of the targeted attestations\\n   */\\n  function getAttestationValueBatch(uint256[] memory collectionIds, address[] memory owners)\\n    external\\n    view\\n    returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x1fc37c4e3b24daa878b3e5dddaafa85d0db60380d1ad38b9d33bc53c786b3f0f\",\"license\":\"MIT\"},\"contracts/core/interfaces/IAttester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Request, Attestation} from '../libs/Structs.sol';\\nimport {IAttestationsRegistry} from '../interfaces/IAttestationsRegistry.sol';\\n\\n/**\\n * @title IAttester\\n * @author Kleoverse - Forked from Sismo Protocol\\n * @notice This is the interface for the attesters in Proof of Talent Protocol\\n */\\ninterface IAttester {\\n  event AttestationGenerated(Attestation attestation);\\n\\n  event AttestationDeleted(Attestation attestation);\\n\\n  error AttestationDeletionNotImplemented();\\n\\n  /**\\n   * @dev Main external function. Allows to generate attestations by making a request and submitting proof\\n   * @param request User request\\n   * @param proofData Data sent along the request to prove its validity\\n   * @return attestations Attestations that has been recorded\\n   */\\n  function generateAttestations(Request calldata request, bytes calldata proofData)\\n    external\\n    returns (Attestation[] memory);\\n\\n  /**\\n   * @dev External facing function. Allows to delete an attestation by submitting proof\\n   * @param collectionIds Collection identifier of attestations to delete\\n   * @param attestationsOwner Owner of attestations to delete\\n   * @param proofData Data sent along the deletion request to prove its validity\\n   * @return attestations Attestations that was deleted\\n   */\\n  function deleteAttestations(\\n    uint256[] calldata collectionIds,\\n    address attestationsOwner,\\n    bytes calldata proofData\\n  ) external returns (Attestation[] memory);\\n\\n  /**\\n   * @dev MANDATORY: must be implemented in attesters\\n   * It should build attestations from the user request and the proof\\n   * @param request User request\\n   * @param proofData Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function buildAttestations(Request calldata request, bytes calldata proofData)\\n    external\\n    view\\n    returns (Attestation[] memory);\\n\\n  /**\\n   * @dev Attestation registry address getter\\n   * @return attestationRegistry Address of the registry\\n   */\\n  function getAttestationRegistry() external view returns (IAttestationsRegistry);\\n}\\n\",\"keccak256\":\"0x6ebe2eeea33096a0f95e9479e7e81822ec190edbfc6786b1e09bc4ede3678085\",\"license\":\"MIT\"},\"contracts/core/interfaces/IFront.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport {Request, Attestation} from '../libs/Structs.sol';\\n\\n/**\\n * @title IFront\\n * @author Kleoverse - Forked from Sismo Protocol\\n * @notice This is the interface of the Front Contract\\n */\\ninterface IFront {\\n  error DifferentRequestsDestinations();\\n\\n  /**\\n   * @dev Forward a request to an attester and generates an early user attestation\\n   * @param attester Attester targeted by the request\\n   * @param request Request sent to the attester\\n   * @param proofData Data provided to the attester to back the request\\n   */\\n  function generateAttestations(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external returns (Attestation[] memory);\\n\\n  /**\\n   * @dev generate multiple attestations at once, to the same destination\\n   * @param attesters Attesters targeted by the attesters\\n   * @param requests Requests sent to attester\\n   * @param proofDataArray Data sent with each request\\n   */\\n  function batchGenerateAttestations(\\n    address[] calldata attesters,\\n    Request[] calldata requests,\\n    bytes[] calldata proofDataArray\\n  ) external returns (Attestation[][] memory);\\n\\n  /**\\n   * @dev build the attestations from a user request targeting a specific attester.\\n   * Forwards to the build function of targeted attester\\n   * @param attester Targeted attester\\n   * @param request User request\\n   * @param proofData Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function buildAttestations(\\n    address attester,\\n    Request calldata request,\\n    bytes calldata proofData\\n  ) external view returns (Attestation[] memory);\\n\\n  /**\\n   * @dev build the attestations from multiple user requests.\\n   * Forwards to the build function(s) of targeted attester(s)\\n   * @param attesters Targeted attesters\\n   * @param requests User requests\\n   * @param proofDataArray Data sent along the request to prove its validity\\n   * @return attestations Attestations that will be recorded\\n   */\\n  function batchBuildAttestations(\\n    address[] calldata attesters,\\n    Request[] calldata requests,\\n    bytes[] calldata proofDataArray\\n  ) external view returns (Attestation[][] memory);\\n}\\n\",\"keccak256\":\"0x4a23f11f9ca0c306d4bccb3329b3f2a57969353c7112525aab4ae55c655bc1dd\",\"license\":\"MIT\"},\"contracts/core/libs/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title  Attestations Registry State\\n * @author Kleoverse - Forked from Sismo Protocol\\n * @notice This contract holds all of the storage variables and data\\n *         structures used by the AttestationsRegistry and parent\\n *         contracts.\\n */\\n\\n// User Attestation Request, can be made by any user\\n// The context of an Attestation Request is a specific attester contract\\n// Each attester has groups of accounts in its available data\\n// eg: for a specific attester:\\n//     group 1 <=> accounts that sent txs on mainnet\\n//     group 2 <=> accounts that sent txs on polygon\\n// eg: for another attester:\\n//     group 1 <=> accounts that sent eth txs in 2022\\n//     group 2 <=> accounts sent eth txs in 2021\\nstruct Request {\\n  // implicit address attester;\\n  // implicit uint256 chainId;\\n  Claim[] claims;\\n  address destination; // destination that will receive the end attestation\\n}\\n\\nstruct Claim {\\n  uint256 groupId; // user claims to have an account in this group\\n  uint256 claimedValue; // user claims this value for its account in the group\\n  bytes extraData; // arbitrary data, may be required by the attester to verify claims or generate a specific attestation\\n}\\n\\n/**\\n * @dev Attestation Struct. This is the struct receive as argument by the Attestation Registry.\\n * @param collectionId Attestation collection\\n * @param owner Attestation collection\\n * @param issuer Attestation collection\\n * @param value Attestation collection\\n * @param timestamp Attestation collection\\n * @param extraData Attestation collection\\n */\\nstruct Attestation {\\n  // implicit uint256 chainId;\\n  uint256 collectionId; // Id of the attestation collection (in the registry)\\n  address owner; // Owner of the attestation\\n  address issuer; // Contract that created or last updated the record.\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Timestamp chosen by the attester, should correspond to the effective date of the attestation\\n  // it is different from the recording timestamp (date when the attestation was recorded)\\n  // e.g a proof of NFT ownership may have be recorded today which is 2 month old data.\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\\n// Attestation Data, stored in the registry\\n// The context is a specific owner of a specific collection\\nstruct AttestationData {\\n  // implicit uint256 chainId\\n  // implicit uint256 collectionId - from context\\n  // implicit owner\\n  address issuer; // Address of the contract that recorded the attestation\\n  uint256 value; // Value of the attestation\\n  uint32 timestamp; // Effective date of issuance of the attestation. (can be different from the recording timestamp)\\n  bytes extraData; // arbitrary data that can be added by the attester\\n}\\n\",\"keccak256\":\"0x6d54a8f34670150fe848a46c2ffdbb612cbb3f63107fb25737ce841e20a0ba85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610db5380380610db583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610d2b61008a600039600060aa0152610d2b6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063369b88be1461005c5780633ee490ce14610085578063ac9d6541146100a5578063aebddc69146100e4578063c0a92c91146100f7575b600080fd5b61006f61006a366004610515565b61010a565b60405161007c91906105df565b60405180910390f35b61009861009336600461071d565b6102bd565b60405161007c91906107c9565b6100cc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007c565b6100986100f236600461071d565b6102d7565b61006f610105366004610515565b6102ee565b606060008667ffffffffffffffff81111561012757610127610886565b60405190808252806020026020018201604052801561015a57816020015b60608152602001906001900390816101455790505b5090506000868660008181106101725761017261089c565b905060200281019061018491906108b2565b6101959060408101906020016108d2565b905060005b888110156102af57816001600160a01b03168888838181106101be576101be61089c565b90506020028101906101d091906108b2565b6101e19060408101906020016108d2565b6001600160a01b0316146102085760405163f1b973df60e01b815260040160405180910390fd5b61027f8a8a8381811061021d5761021d61089c565b905060200201602081019061023291906108d2565b8989848181106102445761024461089c565b905060200281019061025691906108b2565b8888858181106102685761026861089c565b905060200281019061027a91906108f6565b6103ff565b8382815181106102915761029161089c565b602002602001018190525080806102a79061093d565b91505061019a565b509098975050505050505050565b606060006102cd868686866103ff565b9695505050505050565b60606102e585858585610479565b95945050505050565b606060008667ffffffffffffffff81111561030b5761030b610886565b60405190808252806020026020018201604052801561033e57816020015b60608152602001906001900390816103295790505b50905060005b878110156103f3576103c38989838181106103615761036161089c565b905060200201602081019061037691906108d2565b8888848181106103885761038861089c565b905060200281019061039a91906108b2565b8787858181106103ac576103ac61089c565b90506020028101906103be91906108f6565b610479565b8282815181106103d5576103d561089c565b602002602001018190525080806103eb9061093d565b915050610344565b50979650505050505050565b60405163e60f999f60e01b81526060906001600160a01b0386169063e60f999f906104329087908790879060040161098d565b6000604051808303816000875af1158015610451573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e59190810190610b9f565b604051630af411a360e41b81526060906001600160a01b0386169063af411a30906104ac9087908790879060040161098d565b600060405180830381865afa158015610451573d6000803e3d6000fd5b60008083601f8401126104db57600080fd5b50813567ffffffffffffffff8111156104f357600080fd5b6020830191508360208260051b850101111561050e57600080fd5b9250929050565b6000806000806000806060878903121561052e57600080fd5b863567ffffffffffffffff8082111561054657600080fd5b6105528a838b016104c9565b9098509650602089013591508082111561056b57600080fd5b6105778a838b016104c9565b9096509450604089013591508082111561059057600080fd5b5061059d89828a016104c9565b979a9699509497509295939492505050565b60005b838110156105ca5781810151838201526020016105b2565b838111156105d9576000848401525b50505050565b60208152600060208201835180825260408401915060408160051b8501016020860160005b838110156106e957868303603f19018552815180518085526020918201918086019190600582901b87010160005b828110156106cf57601f1980898403018552855180518452602081015160018060a01b03808216602087015280604084015116604087015250506060810151606085015263ffffffff608082015116608085015260a0810151905060c060a085015280518060c08601526106ad8160e08701602085016105af565b6020978801979690960195601f019091169290920160e0019150600101610632565b506020988901989096509490940193505050600101610604565b50909695505050505050565b6001600160a01b038116811461070a57600080fd5b50565b8035610718816106f5565b919050565b6000806000806060858703121561073357600080fd5b843561073e816106f5565b9350602085013567ffffffffffffffff8082111561075b57600080fd5b908601906040828903121561076f57600080fd5b9093506040860135908082111561078557600080fd5b818701915087601f83011261079957600080fd5b8135818111156107a857600080fd5b8860208285010111156107ba57600080fd5b95989497505060200194505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156102af57888303603f19018552815180518452878101516001600160a01b03908116898601528782015116878501526060808201519085015260808082015163ffffffff169085015260a09081015160c091850182905280519185018290529060e09061086681838801858d016105af565b96890196601f01601f1916949094019093019250908601906001016107f0565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235603e198336030181126108c857600080fd5b9190910192915050565b6000602082840312156108e457600080fd5b81356108ef816106f5565b9392505050565b6000808335601e1984360301811261090d57600080fd5b83018035915067ffffffffffffffff82111561092857600080fd5b60200191503681900382131561050e57600080fd5b60006001820161095d57634e487b7160e01b600052601160045260246000fd5b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006040808352608083018635601e198836030181126109ac57600080fd5b87018035602080830167ffffffffffffffff808411156109cb57600080fd5b8360051b8036038313156109de57600080fd5b878a018890529584905260a09589018601956000908a01607e1936889003015b86831015610a98578b8903609f190182528435818112610a1d57600080fd5b8801868101358a528a8101358a88015260608082013536839003603e19018112610a4657600080fd5b9091018b8101919088013586811115610a5e57600080fd5b803603831315610a6d57600080fd5b818d8d0152610a7f828d018285610964565b9b505050948601945060019290920191908501906109fe565b5050505050610aa8818b0161070d565b6001600160a01b0381166060890152945086840381880152505050610ace818688610964565b979650505050505050565b60405160c0810167ffffffffffffffff81118282101715610afc57610afc610886565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b2b57610b2b610886565b604052919050565b600082601f830112610b4457600080fd5b815167ffffffffffffffff811115610b5e57610b5e610886565b610b71601f8201601f1916602001610b02565b818152846020838601011115610b8657600080fd5b610b978260208301602087016105af565b949350505050565b60006020808385031215610bb257600080fd5b825167ffffffffffffffff80821115610bca57600080fd5b818501915085601f830112610bde57600080fd5b815181811115610bf057610bf0610886565b8060051b610bff858201610b02565b9182528381018501918581019089841115610c1957600080fd5b86860192505b83831015610ce857825185811115610c375760008081fd5b860160c0818c03601f1901811315610c4f5760008081fd5b610c57610ad9565b898301518152604080840151610c6c816106f5565b828c0152606084810151610c7f816106f5565b8083850152506080915081850151818401525060a08085015163ffffffff81168114610cab5760008081fd5b83830152928401519289841115610cc457600091508182fd5b610cd28f8d86880101610b33565b9083015250845250509186019190860190610c1f565b999850505050505050505056fea2646970667358221220a73671090bd1d99ca71e4d4d9c5dde00caef31152ace9e2239da5dd4e3e26d3c64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063369b88be1461005c5780633ee490ce14610085578063ac9d6541146100a5578063aebddc69146100e4578063c0a92c91146100f7575b600080fd5b61006f61006a366004610515565b61010a565b60405161007c91906105df565b60405180910390f35b61009861009336600461071d565b6102bd565b60405161007c91906107c9565b6100cc7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161007c565b6100986100f236600461071d565b6102d7565b61006f610105366004610515565b6102ee565b606060008667ffffffffffffffff81111561012757610127610886565b60405190808252806020026020018201604052801561015a57816020015b60608152602001906001900390816101455790505b5090506000868660008181106101725761017261089c565b905060200281019061018491906108b2565b6101959060408101906020016108d2565b905060005b888110156102af57816001600160a01b03168888838181106101be576101be61089c565b90506020028101906101d091906108b2565b6101e19060408101906020016108d2565b6001600160a01b0316146102085760405163f1b973df60e01b815260040160405180910390fd5b61027f8a8a8381811061021d5761021d61089c565b905060200201602081019061023291906108d2565b8989848181106102445761024461089c565b905060200281019061025691906108b2565b8888858181106102685761026861089c565b905060200281019061027a91906108f6565b6103ff565b8382815181106102915761029161089c565b602002602001018190525080806102a79061093d565b91505061019a565b509098975050505050505050565b606060006102cd868686866103ff565b9695505050505050565b60606102e585858585610479565b95945050505050565b606060008667ffffffffffffffff81111561030b5761030b610886565b60405190808252806020026020018201604052801561033e57816020015b60608152602001906001900390816103295790505b50905060005b878110156103f3576103c38989838181106103615761036161089c565b905060200201602081019061037691906108d2565b8888848181106103885761038861089c565b905060200281019061039a91906108b2565b8787858181106103ac576103ac61089c565b90506020028101906103be91906108f6565b610479565b8282815181106103d5576103d561089c565b602002602001018190525080806103eb9061093d565b915050610344565b50979650505050505050565b60405163e60f999f60e01b81526060906001600160a01b0386169063e60f999f906104329087908790879060040161098d565b6000604051808303816000875af1158015610451573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102e59190810190610b9f565b604051630af411a360e41b81526060906001600160a01b0386169063af411a30906104ac9087908790879060040161098d565b600060405180830381865afa158015610451573d6000803e3d6000fd5b60008083601f8401126104db57600080fd5b50813567ffffffffffffffff8111156104f357600080fd5b6020830191508360208260051b850101111561050e57600080fd5b9250929050565b6000806000806000806060878903121561052e57600080fd5b863567ffffffffffffffff8082111561054657600080fd5b6105528a838b016104c9565b9098509650602089013591508082111561056b57600080fd5b6105778a838b016104c9565b9096509450604089013591508082111561059057600080fd5b5061059d89828a016104c9565b979a9699509497509295939492505050565b60005b838110156105ca5781810151838201526020016105b2565b838111156105d9576000848401525b50505050565b60208152600060208201835180825260408401915060408160051b8501016020860160005b838110156106e957868303603f19018552815180518085526020918201918086019190600582901b87010160005b828110156106cf57601f1980898403018552855180518452602081015160018060a01b03808216602087015280604084015116604087015250506060810151606085015263ffffffff608082015116608085015260a0810151905060c060a085015280518060c08601526106ad8160e08701602085016105af565b6020978801979690960195601f019091169290920160e0019150600101610632565b506020988901989096509490940193505050600101610604565b50909695505050505050565b6001600160a01b038116811461070a57600080fd5b50565b8035610718816106f5565b919050565b6000806000806060858703121561073357600080fd5b843561073e816106f5565b9350602085013567ffffffffffffffff8082111561075b57600080fd5b908601906040828903121561076f57600080fd5b9093506040860135908082111561078557600080fd5b818701915087601f83011261079957600080fd5b8135818111156107a857600080fd5b8860208285010111156107ba57600080fd5b95989497505060200194505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156102af57888303603f19018552815180518452878101516001600160a01b03908116898601528782015116878501526060808201519085015260808082015163ffffffff169085015260a09081015160c091850182905280519185018290529060e09061086681838801858d016105af565b96890196601f01601f1916949094019093019250908601906001016107f0565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235603e198336030181126108c857600080fd5b9190910192915050565b6000602082840312156108e457600080fd5b81356108ef816106f5565b9392505050565b6000808335601e1984360301811261090d57600080fd5b83018035915067ffffffffffffffff82111561092857600080fd5b60200191503681900382131561050e57600080fd5b60006001820161095d57634e487b7160e01b600052601160045260246000fd5b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006040808352608083018635601e198836030181126109ac57600080fd5b87018035602080830167ffffffffffffffff808411156109cb57600080fd5b8360051b8036038313156109de57600080fd5b878a018890529584905260a09589018601956000908a01607e1936889003015b86831015610a98578b8903609f190182528435818112610a1d57600080fd5b8801868101358a528a8101358a88015260608082013536839003603e19018112610a4657600080fd5b9091018b8101919088013586811115610a5e57600080fd5b803603831315610a6d57600080fd5b818d8d0152610a7f828d018285610964565b9b505050948601945060019290920191908501906109fe565b5050505050610aa8818b0161070d565b6001600160a01b0381166060890152945086840381880152505050610ace818688610964565b979650505050505050565b60405160c0810167ffffffffffffffff81118282101715610afc57610afc610886565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b2b57610b2b610886565b604052919050565b600082601f830112610b4457600080fd5b815167ffffffffffffffff811115610b5e57610b5e610886565b610b71601f8201601f1916602001610b02565b818152846020838601011115610b8657600080fd5b610b978260208301602087016105af565b949350505050565b60006020808385031215610bb257600080fd5b825167ffffffffffffffff80821115610bca57600080fd5b818501915085601f830112610bde57600080fd5b815181811115610bf057610bf0610886565b8060051b610bff858201610b02565b9182528381018501918581019089841115610c1957600080fd5b86860192505b83831015610ce857825185811115610c375760008081fd5b860160c0818c03601f1901811315610c4f5760008081fd5b610c57610ad9565b898301518152604080840151610c6c816106f5565b828c0152606084810151610c7f816106f5565b8083850152506080915081850151818401525060a08085015163ffffffff81168114610cab5760008081fd5b83830152928401519289841115610cc457600091508182fd5b610cd28f8d86880101610b33565b9083015250845250509186019190860190610c1f565b999850505050505050505056fea2646970667358221220a73671090bd1d99ca71e4d4d9c5dde00caef31152ace9e2239da5dd4e3e26d3c64736f6c634300080e0033",
  "devdoc": {
    "author": "Kleoverse - Forked from Sismo Protocol",
    "kind": "dev",
    "methods": {
      "batchBuildAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])": {
        "details": "build the attestations from multiple user requests. Forwards to the build function of targeted attester",
        "params": {
          "attesters": "Targeted attesters",
          "proofDataArray": "Data sent along the request to prove its validity",
          "requests": "User requests"
        },
        "returns": {
          "_0": "attestations Attestations that will be recorded"
        }
      },
      "batchGenerateAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])": {
        "details": "generate multiple attestations at once, to the same destination",
        "params": {
          "attesters": "Attesters targeted by the attesters",
          "proofDataArray": "Data sent with each request",
          "requests": "Requests sent to attester"
        }
      },
      "buildAttestations(address,((uint256,uint256,bytes)[],address),bytes)": {
        "details": "build the attestations from a user request targeting a specific attester. Forwards to the build function of targeted attester",
        "params": {
          "attester": "Targeted attester",
          "proofData": "Data sent along the request to prove its validity",
          "request": "User request"
        },
        "returns": {
          "_0": "attestations Attestations that will be recorded"
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "attestationsRegistryAddress": "Attestations registry contract address"
        }
      },
      "generateAttestations(address,((uint256,uint256,bytes)[],address),bytes)": {
        "details": "Forward a request to an attester",
        "params": {
          "attester": "Attester targeted by the request",
          "proofData": "Data provided to the attester to back the request",
          "request": "Request sent to the attester"
        }
      }
    },
    "title": "Front",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is the Front contract of the Proof of Talent protocol Behind a proxy, it routes attestations request to the targeted attester and can perform some actions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}